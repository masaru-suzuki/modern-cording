@use "sass:math";

// --------------------
// Defined
// --------------------
$DEFAULT_FONT_SIZE: 16;
$BREAKPOINT_TABLET: 768;
$BREAKPOINT_PC: 1366;

// --------------------
// Utility Functions
// --------------------

@function rem($px) {
  @return math.div($px, 16) * 1rem;
}

@function calcPercent($numerator, $denominator) {
  @return math.div($numerator, $denominator) * 100;
}

@function calcVw($numerator, $denominator) {
  @return math.div($numerator, $denomi警告 nator) * 100vw;
}

// 小数点3桁にする
// ex) 123.456789 => 123.457
@function roundNumber($num) {
  @return math.div(round($num * 1000), 1000);
}

// --------------------
// Functions
// --------------------

@function vw($px, $vw: 1280) {
  @return math.div($px, $vw) * 100vw;
}

@function fluidMaxSize($px, $vw: 1280) {
  @return min(vw($px, $vw), rem($px));
}

@function fluidMinSize($px, $vw: 1280) {
  @return max(vw($px, $vw), rem($px));
}

@function stuffHalfLineHeight($fz, $lh) {
  @return rem(math.div(($fz * $lh - $fz), 2) * -1);
}

/**
* 最小のサイズを渡すと、clampを返す関数
* 推奨値と最大値を設定することもできる
* 推奨値や最大値が設定されたときには、そちらが優先される
* 最大値が設定されていた場合、推奨値は最大値に合わせる
*/
@function clamp_vw($min, $middle: 0, $max: 0) {
  // 最小値から滑らかにサイズが上がるように計算されたvw
  $calculated_middle_fz_for_min: roundNumber(calcPercent($min, $BREAKPOINT_TABLET));

  // 最大値に滑らかに移行するように計算されたvw
  $calculated_middle_fz_for_max: roundNumber(calcPercent($max, $BREAKPOINT_PC));

  // tabletサイズの時に計算された推奨値
  $calculated_middle_fz_for_middle: roundNumber(calcPercent($middle, $BREAKPOINT_TABLET));

  // $minがPC幅になったときのサイズを計算
  $calculated_max_fz: round($BREAKPOINT_PC * math.div($calculated_middle_fz_for_min, 100));

  /**
  最小値
  */
  $min_size: rem($min);

  /**
  * 推奨値
  * 推奨値が指定されていなかったら、最小値から算出する
  */
  $middle_fz: $calculated_middle_fz_for_min;
  @if ($middle != 0) {
    $middle_fz: $calculated_middle_fz_for_middle;
  } @else {
    @if ($max != 0) {
      $middle_fz: $calculated_middle_fz_for_max;
    }
  }

  /**
  * 最大値
  * 最大値が指定されていなかったら最小値から算出する
  * 最大値が設定されていない、かつ、推奨値が設定されている場合は、推奨値を最大値とする
  */
  $max_fz: rem($calculated_max_fz);
  @if ($max != 0) {
    $max_fz: rem($max);
  } @else {
    @if ($middle != 0) {
      $max_fz: rem($middle);
    }
  }

  @return clamp(#{$min_size}, #{$middle_fz}vw, #{$max_fz});
}

// --------------------
// Mixin
// --------------------

// breakpoint
$breakpoint-min: (
  "sm": "print, screen and (min-width: 480px)",
  "md": "print, screen and (min-width: 768px)",
  "lg": "print, screen and (min-width: 960px)",
  "xl": "print, screen and (min-width: 1280px)",
);

@mixin media($breakpoint: lg) {
  @media #{map-get($breakpoint-min, $breakpoint)} {
    @content;
  }
}

@mixin scrollMarginTop() {
  scroll-margin-top: var(--header-height-sp);

  @include media() {
    scroll-margin-top: var(--header-height-pc-tight);
  }
}

// Button Animation
@mixin bgSlideAnimation() {
  display: block;
  content: "";
  position: absolute;
  left: 0;
  bottom: 0;
  width: 0;
  height: 100%;
  background-color: var(--color-secondary);
  transition: width 0.2s;
}

@mixin bgSlideAnimation-hover() {
  width: 100%;
}

@mixin lineAnimation() {
  position: absolute;
  content: "";
  bottom: 0;
  left: 0;
  width: 0;
  height: 1px;
  background-color: var(--color-main);
  transition: 0.2s ease;
}

@mixin lineAnimation-hover() {
  width: 100%;
}

// SNS Icon
// SNSのアイコンを中央よせする
// ex) $size = 30
@mixin circleIcon($size) {
  display: grid;
  place-items: center;
  width: rem($size);
  aspect-ratio: 1 / 1;
  clip-path: circle(50%);
  @supports not (aspect-ratio: 1/ 1) {
    height: $size;
  }
}

@mixin iconExpandTrue() {
  .c-icon-expand {
    &::after {
      transform: none;
    }
  }
}

@mixin iconBlank() {
  &::after {
    display: inline-block;
    content: "";
    width: rem(16);
    height: rem(16);
    background: url("/assets2022/images/icon_blank.svg") no-repeat left top / 100% 100%;
  }
}

@mixin iconZoom() {
  &::after {
    display: block;
    content: "";
    width: 32px;
    height: 32px;
    background: var(--color-main) url("/assets/images/icon_zoom.svg") no-repeat 7px 7px / 19px 19px;
    color: #fff;
  }
}

@mixin hoverAction($name: "transparent") {
  @if $name == "transparent" {
    transition: opacity 0.2s ease;

    &:hover {
      opacity: 0.7;
    }
  }

  @if $name == "fill-in" {
    transition: opacity 0.2s ease;

    &:hover {
      opacity: 0.7;
    }
  }
}

@mixin headingLeftBorder($line-height, $width: 4px) {
  &::before {
    display: block;
    content: "";
    position: absolute;
    top: calc(50%);
    left: 0;
    height: calc(100% + ((1 - #{$line-height}) * 1em) + rem(6)); //+6は補正：文字高ママでいいなら不要
    width: $width;
    background-color: var(--color-main);
    transform: translateY(calc(-50% + rem(1))); //+1はNoto Sans用の補正（やや下ズレするため）
  }
}

@mixin lineHeightCrop($line-height) {
  &::before {
    display: block;
    width: 0;
    height: 0;
    margin-top: calc((1 - #{$line-height}) * 0.5em);
    content: "";
  }

  &::after {
    display: block;
    width: 0;
    height: 0;
    margin-bottom: calc((1 - #{$line-height}) * 0.5em);
    content: "";
  }
}

@mixin jaStringBreakControl() {
  span:not([class]) {
    display: inline-block;
  }

  span.t-jaStringBr-sp {
    display: inline-block;

    @include media() {
      display: inline;
    }
  }

  span.t-jaStringBr-pc {
    @include media() {
      display: inline-block;
    }
  }
}

@mixin sectionSideBorders($sideMargin: "default", $height: "default") {
  @if $sideMargin == "default" {
    $sideMargin: calc((100% - fluidMaxSize(1200)) / 2);
  }

  @if $height == "last" {
    $height: calc(100% + rem(160));
  } @else {
    $height: 100%;
  }

  position: relative;

  &::before,
  &::after {
    position: absolute;
    top: 0;
    display: block;
    content: "";
    width: 1px;
    height: $height;
    background-color: var(--color-side-border);
  }

  &::before {
    left: $sideMargin;
  }

  &::after {
    right: $sideMargin;
  }
}

// アクセシビリティ
// Bootstrap ver
@mixin sr-only {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

// Apple ver
// @mixin sr-only {
//   position: absolute;
//   width: 1px;
//   height: 1px;
//   padding: 0;
//   overflow: hidden;
//   clip: rect(1px, 1px, 1px, 1px);
//   -webkit-clip-path: inset(0px 0px 99.9% 99.9%);
//   clip-path: inset(0px 0px 99.9% 99.9%);
//   border: 0;
// }
